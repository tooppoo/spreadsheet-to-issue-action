name: Sync Spreadsheet to Issues

on:
  workflow_call:
    inputs:
      config_path:
        description: 'Path to configuration file'
        required: false
        default: '.github/spreadsheet-sync-config.json'
        type: string
      sync_status_column:
        description: 'Column to mark sync status (e.g., Z)'
        required: false
        default: 'Z'
        type: string
      google_service_account:
        description: 'Google service account email'
        required: true
        type: string
      wif_provider:
        description: 'Workload Identity Federation provider'
        required: true
        type: string
      max_issues_per_run:
        description: 'Maximum number of issues to create per run'
        required: false
        default: 50
        type: number
      rate_limit_delay:
        description: 'Delay between GitHub API calls (seconds)'
        required: false
        default: 0.33
        type: number
      dry_run:
        description: 'Run in dry-run mode (no actual issues created)'
        required: false
        default: false
        type: boolean
    secrets:
      GITHUB_TOKEN:
        description: 'GitHub token for creating issues'
        required: true

permissions:
  # Requires creating issues and accessing Google Sheets
  issues: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ inputs.google_service_account }}
          workload_identity_provider: ${{ inputs.wif_provider }}
          
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Load configuration
        id: config
        run: |
          if [ -f "${{ inputs.config_path }}" ]; then
            echo "config_exists=true" >> $GITHUB_OUTPUT
            CONFIG=$(cat "${{ inputs.config_path }}")
            echo "spreadsheet_id=$(echo $CONFIG | jq -r '.spreadsheet_id')" >> $GITHUB_OUTPUT
            echo "sheet_name=$(echo $CONFIG | jq -r '.sheet_name // "Sheet1"')" >> $GITHUB_OUTPUT
            echo "sync_status_column=$(echo $CONFIG | jq -r --arg col "${{ inputs.sync_status_column }}" '.sync_status_column // $col')" >> $GITHUB_OUTPUT
            echo "sync_status_value=$(echo $CONFIG | jq -r '.sync_status_value // "ÈÄ£Êê∫Ê∏à„Åø"')" >> $GITHUB_OUTPUT
            echo "title_template=$(echo $CONFIG | jq -r '.title_template // "[{{ row.A }}] {{ row.B }}"')" >> $GITHUB_OUTPUT
            echo "body_template=$(echo $CONFIG | jq -r '.body_template // "{{ row | json }}"')" >> $GITHUB_OUTPUT
            echo "labels=$(echo $CONFIG | jq -c '.labels // []')" >> $GITHUB_OUTPUT
            echo "repository=$(echo $CONFIG | jq -r --arg repo "${GITHUB_REPOSITORY}" '.repository // $repo')" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Configuration file not found: ${{ inputs.config_path }}"
            exit 1
          fi

      - name: Find unsynced rows
        id: unsynced
        run: |
          # Fetch all data to find rows without sync status
          SPREADSHEET_ID="${{ steps.config.outputs.spreadsheet_id }}"
          SHEET_NAME="${{ steps.config.outputs.sheet_name }}"
          SYNC_COLUMN="${{ steps.config.outputs.sync_status_column }}"
          SYNC_VALUE="${{ steps.config.outputs.sync_status_value }}"

          # Get access token for Google Sheets API
          ACCESS_TOKEN=$(gcloud auth print-access-token)

          # Fetch all data including sync status column
          RANGE="${SHEET_NAME}!A:${SYNC_COLUMN}"
          RESPONSE=$(curl -s "https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${RANGE}?valueRenderOption=UNFORMATTED_VALUE&dateTimeRenderOption=FORMATTED_STRING" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" 2>/tmp/gcloud_error.log) || {
            echo "‚ùå Google Sheets API error:";
            cat /tmp/gcloud_error.log;
            RESPONSE='{"values": []}';
          }

          echo "response=${RESPONSE}" >> $GITHUB_OUTPUT

          # Find unsynced rows (rows without sync status value in sync column)
          UNSYNCED_ROWS=$(echo "${RESPONSE}" | jq --arg sync_value "${SYNC_VALUE}" '
            .values as $all_rows |
            [
              range(length) as $i |
              $all_rows[$i] as $row |
              if ($row | length) > 0 and (($row[-1] // "") != $sync_value) then
                {
                  "row_number": ($i + 1),
                  "data": $row[0:-1]  # Exclude sync status column from data
                }
              else
                empty
              end
            ] | .[0:${{ inputs.max_issues_per_run }}]
          ')

          echo "unsynced_rows=${UNSYNCED_ROWS}" >> $GITHUB_OUTPUT
          echo "unsynced_count=$(echo "${UNSYNCED_ROWS}" | jq 'length')" >> $GITHUB_OUTPUT

      - name: Process and create issues
        if: steps.unsynced.outputs.unsynced_count > 0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UNSYNCED_ROWS='${{ steps.unsynced.outputs.unsynced_rows }}'
          SPREADSHEET_ID="${{ steps.config.outputs.spreadsheet_id }}"
          SHEET_NAME="${{ steps.config.outputs.sheet_name }}"
          SYNC_COLUMN="${{ steps.config.outputs.sync_status_column }}"
          SYNC_VALUE="${{ steps.config.outputs.sync_status_value }}"
          TITLE_TEMPLATE='${{ steps.config.outputs.title_template }}'
          BODY_TEMPLATE='${{ steps.config.outputs.body_template }}'
          LABELS='${{ steps.config.outputs.labels }}'
          REPOSITORY='${{ steps.config.outputs.repository }}'
          DRY_RUN='${{ inputs.dry_run }}'
          RATE_LIMIT_DELAY='${{ inputs.rate_limit_delay }}'

          echo "Processing $(echo ${UNSYNCED_ROWS} | jq 'length') unsynced rows..."

          # Get access token for Google Sheets API (for writing back sync status)
          ACCESS_TOKEN=$(gcloud auth print-access-token)

          # Process each unsynced row
          ROW_COUNT=$(echo ${UNSYNCED_ROWS} | jq 'length')
          for i in $(seq 0 $((ROW_COUNT - 1))); do
            # Extract row data
            ROW_ITEM=$(echo ${UNSYNCED_ROWS} | jq -c ".[$i]")
            CURRENT_ROW=$(echo ${ROW_ITEM} | jq -r '.row_number')
            ROW_DATA=$(echo ${ROW_ITEM} | jq -c '.data')
            
            # Convert row array to object with column letters (a, b, c, etc.)
            # Use a readable mapping from an alphabet string to avoid long inline arrays
            ROW_OBJECT=$(echo ${ROW_DATA} | jq -r '
              . as $arr |
              reduce range(length) as $i (
                {};
                .[("abcdefghijklmnopqrstuvwxyz" | split(""))[$i]] = $arr[$i]
              )
            ')
            
            # Process templates using simple substitution
            TITLE="${TITLE_TEMPLATE}"
            BODY="${BODY_TEMPLATE}"
            
            # Replace column references (case insensitive)
            for col in a b c d e f g h i j k l m n o p q r s t u v w x y z; do
              COL_UPPER=$(echo "$col" | tr '[:lower:]' '[:upper:]')
              COL_VALUE=$(echo "${ROW_OBJECT}" | jq -r --arg col "$col" '.[$col] // ""')
              
              # Escape special characters for safe sed replacement
              ESCAPED_COL_VALUE=$(printf '%s' "${COL_VALUE}" | sed -e 's/[\/&\\]/\\&/g')
              
              TITLE=$(echo "${TITLE}" | sed "s#{{ row\.${COL_UPPER} }}#${ESCAPED_COL_VALUE}#g")
              BODY=$(echo "${BODY}" | sed "s#{{ row\.${COL_UPPER} }}#${ESCAPED_COL_VALUE}#g")
            done
            
            # Replace row number
            TITLE=$(echo "${TITLE}" | sed "s#{{ row_number }}#${CURRENT_ROW}#g")
            BODY=$(echo "${BODY}" | sed "s#{{ row_number }}#${CURRENT_ROW}#g")
            
            # Replace full row JSON (escape and use different delimiter)
            ROW_JSON=$(echo "${ROW_OBJECT}" | jq -c .)
            ESCAPED_ROW_JSON=$(printf '%s' "${ROW_JSON}" | sed -e 's/[\/&\\]/\\&/g')
            TITLE=$(echo "${TITLE}" | sed "s#{{ row | json }}#${ESCAPED_ROW_JSON}#g")
            BODY=$(echo "${BODY}" | sed "s#{{ row | json }}#${ESCAPED_ROW_JSON}#g")
            
            # Escape mentions in title and body for security
            # Replace all '@' with full-width 'Ôº†' to prevent unwanted GitHub mentions
            TITLE=$(echo "${TITLE}" | sed 's/@/Ôº†/g')
            BODY=$(echo "${BODY}" | sed 's/@/Ôº†/g')
            
            echo "Row ${CURRENT_ROW}: ${TITLE}"
            
            if [ "${DRY_RUN}" = "true" ]; then
              echo "üîç [DRY RUN] Would create issue:"
              echo "  Title: ${TITLE}"
              echo "  Body: ${BODY}"
              echo "  Labels: ${LABELS}"
            else
              # Create GitHub issue with rate limiting
              LABELS_JOINED=$(echo "${LABELS}" | jq -r '. | join(",")')
              if [ -n "${LABELS_JOINED}" ]; then
                gh issue create \
                  --repo "${REPOSITORY}" \
                  --title "${TITLE}" \
                  --body "${BODY}" \
                  --label "${LABELS_JOINED}" \
                  && ISSUE_CREATED=true \
                  || { echo "‚ùå Failed to create issue for row ${CURRENT_ROW}"; ISSUE_CREATED=false; }
              else
                gh issue create \
                  --repo "${REPOSITORY}" \
                  --title "${TITLE}" \
                  --body "${BODY}" \
                  && ISSUE_CREATED=true \
                  || { echo "‚ùå Failed to create issue for row ${CURRENT_ROW}"; ISSUE_CREATED=false; }
              fi

              # Mark as synced in spreadsheet if issue was created successfully
              if [ "$ISSUE_CREATED" = "true" ]; then
                echo "‚úÖ Created issue for row ${CURRENT_ROW}, marking as synced..."
                # Update sync status in spreadsheet
                RANGE="${SHEET_NAME}!${SYNC_COLUMN}${CURRENT_ROW}"
                UPDATE_BODY=$(jq -n --arg value "${SYNC_VALUE}" '{
                  "values": [[$value]]
                }')

                curl -s -X PUT \
                  "https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${RANGE}?valueInputOption=RAW" \
                  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
                  -H "Content-Type: application/json" \
                  -d "${UPDATE_BODY}" \
                  || echo "‚ö†Ô∏è Failed to update sync status for row ${CURRENT_ROW}"
              fi

              # Rate limiting
              sleep "${RATE_LIMIT_DELAY}"
            fi
          done


      - name: Summary
        run: |
          if [ "${{ steps.unsynced.outputs.unsynced_count }}" -gt "0" ]; then
            echo "‚úÖ Processed ${{ steps.unsynced.outputs.unsynced_count }} unsynced rows from spreadsheet"
            if [ "${{ inputs.dry_run }}" = "true" ]; then
              echo "üîç Running in dry-run mode - no issues were actually created"
            else
              echo "üìù Sync status has been written back to the spreadsheet"
            fi
          else
            echo "‚ÑπÔ∏è No unsynced rows found in spreadsheet"
          fi
